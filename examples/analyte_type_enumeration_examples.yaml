# Data examples demonstrating several proposed approaches for representing coded/enumerated values in the CRDC-H.
# We use GDC.Analyte.analyte_type as our example of an enumerated field. 
# In GDC, this field captures a human readable code for an enumerated set of values.  An Analyte record with three fields is below:

     #      analyte_id                       analyte_uuid                  analyte_type    
     # TCGA-2G-AAGW-01A-11D      d64cba64-7eba-4a09-887d-bfc401edd138          DNA                  

# The full record for this analyte can be found on the GDC website at:
# https://portal.gdc.cancer.gov/cases/3cdbf331-991d-41cb-a694-a2aa95c4aa26?bioId=d64cba64-7eba-4a09-887d-bfc401edd138

# CONTRIBUTOR INSTRUCTIONS:
   # Each proposed approach for representing the enumerated analyte_type data should illustrate how it would capture 
   # both the harmonized canonical value as well as the original source value. And also discuss/illustrate how validation will work.  
   # If some of these feature are supported in structures / artifacts outside of the enumeration object in the data, these should be detailed as well.

###################################################################################################


# Approach 1: Simple Enumeration (current source node approach) 

  identifier:
    - value: tcga:TCGA-2G-AAGW-01A-11D
    - value: gdc:d64cba64-7eba-4a09-887d-bfc401edd138
  analyte_type: ncit:C449       # Here we simply replace the the source value with an ontology term as the canoncial representaiton of this concept. 

# With this approach, there is no place to capture the source value in the data/message itself.  
# But there would be an extenral mapping file (SSSOM?) that holds our mappings of source values to canonical codes.
# And also a lookup service/API to retrieve these mappings.

###################################################################################################

# Approach 2: Codings (current source node approach) 

  identifier:
    - value: tcga:TCGA-2G-AAGW-01A-11D
    - value: gdc:d64cba64-7eba-4a09-887d-bfc401edd138
  analyte_type: 
    - code: ncit:C449                 # The canonical/harmonized code for the concept of 'DNA'  
      label: deoxyribonucleic acid    # The label of the code as defined in NCIT
    
# A Coding provides a simple structure to pair the canonical code with its human readable label. 
# As with a simple enumeration, there is no place here to capture the source value in the data/message itself.  

###################################################################################################

# Approach 3: Codeable Concepts (current CRDC-H proposal)

# Codable Concepts provide an additional layer of structure to wrap multiple Coding objects, along with a 'text' field to enter data exactly as found in the source 
# We can use one Coding to capture the source value, and another to capture the harmonized/canonical value - and pass both in the data/message,
# along with any number of other codings from the same concept from other ontologies/terminologies, if desired. 
# Note in this example values are represented as curies that combine code and system, rather than separate code + system fields.

  identifier:
    - value: tcga:TCGA-2G-AAGW-01A-11D
    - value: gdc:d64cba64-7eba-4a09-887d-bfc401edd138
  analyte_type:
    text: DNA               # A free-text label for the concept
    coding:
      - code: ncit:C449     # The first  Coding holds the canonical/harmonized value for this concept - an NCIT term.
        label: deoxyribonucleic acid    # . . . and the label of the term  as defined in NCIT.
      - code: gdc:DNA       # The second Coding holds the code used by the source node (a CURIE where 'gdc' will expand to a unique namespace for the GDC system).
        label: DNA          # . . . and its human-readable label (in GDC the code itself is human readable, so the 'label' adds no real value)


# There are a couple approaches we might take indicate which Coding is the canonical one that requires validation against the schema. 

   # Approach 3a: Let order indicate status/role of a Coding.
   # For example, we might make a rule that the first Coding in the array (position 0) is the harmonized/cannonical code, and position 1 is the original soruce value.
   # This would look no different than the example above, but the role/type of coding woudl be implicit in its order.
   # In cases where there is no canonical value yet, the first item in the array of Codings would be null.
   # Finally, to guard against unintended shuffling of Coding items, we could make order explicit by adding an 'order' field, e.g.:  
    coding:
      - code: ncit:C449     
        label: deoxyribonucleic acid   
        order: 1
      - code: gdc:DNA      
        label: DNA   
        order: 2

   # Approach 3b: Alternatively, we could extend the base Coding model with features to explicitly indicate the role/status of a given Coding object. 
   # Here we might define a 'coding_type' field that holds terms such as 'canonical value', or 'source value.
   # We could also define 'enum_id' and 'enum_version' fields to exlicitly capture the enumeration/value set from which the code came.  

    coding:
      - code: ncit:C449     
        label: deoxyribonucleic acid   
        coding_type: 
           - code: ex:1
             label: canonical value
      - code: gdc:DNA      
        label: DNA   
        coding_type:
           - code: ex:2
             label: original value
             
             
##################################################################################################

# Approach 4: LinkML Enumerations (TO DO: Dazhi? Harold?)







##################################################################################################

# Approach 5:  Separate Provenance OBject (TO DO: Chris M?)



